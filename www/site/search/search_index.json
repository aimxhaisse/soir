{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SOIR","text":""},{"location":"reference/bpm/","title":"\u23f3 bpm","text":""},{"location":"reference/bpm/#soir.bpm","title":"<code>bpm</code>","text":"<p>The bpm module provides a way to set the tempo of the current session. The tempo is a global setting that affects all loops and samples, it is measured in beats per minute (BPM) and can be adjusted in real-time.</p>"},{"location":"reference/bpm/#soir.bpm--cookbook","title":"Cookbook","text":""},{"location":"reference/bpm/#soir.bpm--set-the-tempo","title":"Set the tempo","text":"<pre><code>bpm.set(120)\n</code></pre>"},{"location":"reference/bpm/#soir.bpm--get-the-current-tempo","title":"Get the current tempo","text":"<pre><code>tempo = bpm.get()\n</code></pre>"},{"location":"reference/bpm/#soir.bpm--get-the-current-beat","title":"Get the current beat","text":"<pre><code>beat = bpm.beat()\n</code></pre>"},{"location":"reference/bpm/#soir.bpm--reference","title":"Reference","text":""},{"location":"reference/bpm/#soir.bpm.beat","title":"<code>beat()</code>","text":"<p>Get the current beat.</p> <p>Returns:</p> Type Description <code>float</code> <p>The current beat.</p>"},{"location":"reference/bpm/#soir.bpm.get","title":"<code>get()</code>","text":"<p>Get the BPM. This function can only be called from the global    scope.</p> <p>Returns:</p> Type Description <code>float</code> <p>The current BPM.</p> <p>Raises:</p> Type Description <code>InLoopException</code> <p>If called from inside a loop.</p>"},{"location":"reference/bpm/#soir.bpm.set","title":"<code>set(bpm)</code>","text":"<p>Set the BPM. This function can only be called from the global    scope.</p> <p>Parameters:</p> Name Type Description Default <code>bpm</code> <code>float</code> <p>The new BPM.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The new BPM.</p> <p>Raises:</p> Type Description <code>InLoopException</code> <p>If called from inside a loop.</p>"},{"location":"reference/errors/","title":"\ud83d\udd25 errors","text":""},{"location":"reference/errors/#soir.errors","title":"<code>errors</code>","text":"<p>The errors module contains exceptions raised by the Soir engine to signal errors at runtime.</p>"},{"location":"reference/errors/#soir.errors.InLoopException","title":"<code>InLoopException</code>","text":"<p>               Bases: <code>SoirException</code></p> <p>Raised when trying to execute code inside a live context.</p> <p>In Soir, some of the code is expected to be used from the global scope as it affects everything, for example, setting the BPM. This exception is raised if such code is called from a loop.</p>"},{"location":"reference/errors/#soir.errors.NotInLoopException","title":"<code>NotInLoopException</code>","text":"<p>               Bases: <code>SoirException</code></p> <p>Raised when trying to execute code outside of a live context.</p> <p>In Soir, some of the code is expected to be used from within a loop or a live function, for instance sleeping between two instructions. This exception is raised if such code is called from the global scope.</p>"},{"location":"reference/errors/#soir.errors.SoirException","title":"<code>SoirException</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for Soir exceptions.</p>"},{"location":"reference/errors/#soir.errors.UnknownMidiTrackException","title":"<code>UnknownMidiTrackException</code>","text":"<p>               Bases: <code>SoirException</code></p> <p>Raised when trying to use an invalid MIDI track.</p> <p>In Soir, MIDI tracks are used to send MIDI events to the external synthesizer. This exception is raised if an invalid MIDI track is used.</p>"},{"location":"reference/midi/","title":"\ud83c\udfbc midi","text":""},{"location":"reference/midi/#soir.midi","title":"<code>midi</code>","text":"<p>The midi module provides a way to communicate with external synthesizers.</p>"},{"location":"reference/midi/#soir.midi--cookbook","title":"Cookbook","text":"<pre><code>with midi.use_chan(1):\n  midi.note_on(60)\n  sleep(1)\n  midi.note_off(60)\n</code></pre>"},{"location":"reference/midi/#soir.midi--reference","title":"Reference","text":""},{"location":"reference/midi/#soir.midi.use_chan","title":"<code>use_chan(chan)</code>","text":"<p>Context manager to set the MIDI channel to use.</p> <p><code>use_chan</code> can be used to send MIDI events to a specific channel. It can be used as a context manager to set the MIDI channel to use, or as a function from within a loop.</p> <p>Examples:</p> <pre><code>@loop(beats=4, track=1)\ndef my_loop:\n    # This block will send MIDI events to channel 1.\n    with midi.use_chan(1):\n        midi.note_on(60)\n        sleep(1)\n        midi.note_off(60)\n\n   # From this point on, MIDI events will be sent to channel 3.\n   midi.use_chan(3)\n   midi.note_on(60)\n</code></pre>"},{"location":"reference/midi/#soir.midi.note","title":"<code>note(note, duration, velocity=127, chan=None)</code>","text":"<p>Send the MIDI note on and off to the external synthesizer using the track id of the loop as MIDI channel.</p> <p>Parameters:</p> Name Type Description Default <code>note</code> <code>int</code> <p>The MIDI note to send.</p> required <code>duration</code> <code>float</code> <p>The duration of the note in beats.</p> required <code>velocity</code> <code>int</code> <p>The velocity. Defaults to 127.</p> <code>127</code> <code>chan</code> <code>int | None</code> <p>The MIDI chan to send the note to.</p> <code>None</code> <p>Raises:</p> Type Description <code>NotInLoopException</code> <p>If called from outside a loop.</p>"},{"location":"reference/midi/#soir.midi.note_off","title":"<code>note_off(note, velocity=127, chan=None)</code>","text":"<p>Send the MIDI note off to the external synthesizer using the track id of the loop as MIDI channel.</p> <p>Parameters:</p> Name Type Description Default <code>note</code> <code>int</code> <p>The MIDI note to stop.</p> required <code>velocity</code> <code>int</code> <p>The velocity. Defaults to 127.</p> <code>127</code> <code>chan</code> <code>int | None</code> <p>The MIDI chan to stop the note on. Uses the value from use_chan() if not provided.</p> <code>None</code> <p>Raises:</p> Type Description <code>NotInLoopException</code> <p>If called from outside a loop.</p>"},{"location":"reference/midi/#soir.midi.note_on","title":"<code>note_on(note, velocity=127, chan=None)</code>","text":"<p>Send the MIDI note to the external synthesizer using the track id of the loop as MIDI channel. Args:     note: The MIDI note to send.     velocity: The velocity. Defaults to 127.     chan: The MIDI chan to send the note to. Uses the value from use_chan() if not provided.</p> <p>Raises:</p> Type Description <code>NotInLoopException</code> <p>If called from outside a loop.</p>"},{"location":"reference/sampler/","title":"\ud83d\udcfc sampler","text":""},{"location":"reference/sampler/#soir.sampler","title":"<code>sampler</code>","text":"Info <p>The sampler module can be used on loops running on tracks with instrument type set to <code>sampler</code>.</p> <p>The sampler module provides a way to load samples and play them inside loops in an intuitive way. Once instantiated, a <code>Sampler</code> can be used to play samples from the selected pack given their name. If no exact match of the sample name is found, the first matching sample is selected. The cost of creating and using a sampler is cheap so it is fine to have a lot of instances at once.</p>"},{"location":"reference/sampler/#soir.sampler--cookbook","title":"Cookbook","text":""},{"location":"reference/sampler/#soir.sampler--play-samples","title":"Play samples","text":"<pre><code>s = sampler.new('808')\n\n@loop\ndef kick(beats=4):\n  for i in range(4):\n    s.play('kick')\n    sleep(1)\n</code></pre>"},{"location":"reference/sampler/#soir.sampler--list-available-packs","title":"List available packs","text":"<pre><code>packs = sampler.packs()\n</code></pre>"},{"location":"reference/sampler/#soir.sampler--list-samples-in-a-pack","title":"List samples in a pack","text":"<pre><code>samples = sampler.samples('808')\n</code></pre>"},{"location":"reference/sampler/#soir.sampler--reference","title":"Reference","text":""},{"location":"reference/sampler/#soir.sampler.Sample","title":"<code>Sample(name, pack, path, duration)</code>  <code>dataclass</code>","text":"<p>A sample is a sound file that can be played by a sampler. It has a name, a pack, a path, and a duration. The name is the identifier used to play the sample, the pack is the name of the pack the sample belongs to, the path is the location of the sample file, and the duration is the length of the sample in seconds.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the sample.</p> <code>pack</code> <code>str</code> <p>The name of the pack.</p> <code>path</code> <code>str</code> <p>The location of the sample file.</p> <code>duration</code> <code>float</code> <p>The length of the sample in seconds.</p>"},{"location":"reference/sampler/#soir.sampler.Sampler","title":"<code>Sampler(pack_name)</code>","text":"<p>Creates a new sampler with samples from the designated pack.</p> Note <p>You can create a Sampler via the shortcut <code>n.sampler.new()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>pack_name</code> <code>str</code> <p>The name of the sample pack to use.</p> required"},{"location":"reference/sampler/#soir.sampler.Sampler.play","title":"<code>play(name, start=0.0, end=1.0)</code>","text":"<p>Plays a sample by its given name. If there is no exact match, attempts to find one that contains the name (for example, 'kick' will match 'hard-kick'). If the selected sample is already being played, enqueues a new one, allowing to play simultaneously multiple times the same sample.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the sample.</p> required <code>start</code> <code>float</code> <p>When in the sample to start playing in the [0.0, 1.0] range.</p> <code>0.0</code> <code>end</code> <code>float</code> <p>When in the sample to end playing in the [0.0, 1.0] range.</p> <code>1.0</code>"},{"location":"reference/sampler/#soir.sampler.Sampler.stop","title":"<code>stop(name)</code>","text":"<p>Stops playing the sample. If there is no exact match, attempts to find one that contains the name (for example, 'kick' will match 'hard-kick'). If the same sample is currently played multiple times, the latest one is selected to stop (LIFO).</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the sample.</p> required"},{"location":"reference/sampler/#soir.sampler.new","title":"<code>new(pack_name)</code>","text":"<p>Creates a new sampler with samples from the designated pack.</p> <p>Parameters:</p> Name Type Description Default <code>pack_name</code> <code>str</code> <p>The name of the sample pack to use.</p> required"},{"location":"reference/sampler/#soir.sampler.packs","title":"<code>packs()</code>","text":"<p>Returns the list of available sample packs.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>The list of loaded sample packs.</p>"},{"location":"reference/sampler/#soir.sampler.samples","title":"<code>samples(pack_name)</code>","text":"<p>Returns the list of samples available in the given pack.</p> <p>Parameters:</p> Name Type Description Default <code>pack_name</code> <code>str</code> <p>The name of the sample pack.</p> required <p>Returns:</p> Type Description <code>list[Sample]</code> <p>The list of samples from the sample pack.</p>"},{"location":"reference/soir/","title":"\u2728 soir","text":""},{"location":"reference/soir/#soir","title":"<code>soir</code>","text":"<p>Soir is a Python library for live coding music. It provides facilities to create and manipulate audio tracks, and to interact with external synthesizers. There are two important concepts in Soir:</p> <ul> <li> <p>Live functions (<code>@live</code> decorator)     that are executed each time the code is changed. They are used to     setup the environment, and to create tracks and instruments.</p> </li> <li> <p>Loops functions (<code>@loop</code>     decorator) that are rescheduled every given number of beats. They     are used to create patterns and sequences.</p> </li> </ul> <pre><code># Live function\n@live\ndef setup():\n    bpm.set(120)\n\n# Loop function\n@loop(beats=1)\ndef kick():\n    log('beat')\n</code></pre> <p>Soir's facilities are organized in modules that are accessible from the global context. For example, to set the BPM, you can use <code>bpm.set(120)</code> without having to explicitly import the <code>bpm</code> module. The available modules are:</p> <ul> <li>bpm</li> <li>tracks</li> <li>midi</li> <li>errors</li> <li>sampler</li> </ul>"},{"location":"reference/soir/#soir--cookbook","title":"Cookbook","text":""},{"location":"reference/soir/#soir--minimalistic-example","title":"Minimalistic Example","text":"<pre><code>@live\ndef setup():\n    bpm.set(120)\n\n    tracks.setup([\n        tracks.mk_sampler(1, muted=False, volume=100),\n    ])\n\ns = sampler.new('passage')\n\n@loop(beats=4, track=1)\ndef kick():\n    for i in range(4):\n        s.play('kick')\n        sleep(1)\n</code></pre>"},{"location":"reference/soir/#soir--reference","title":"Reference","text":""},{"location":"reference/soir/#soir.live","title":"<code>live()</code>","text":"<p>Decorator to create a live function that is executed each time the code is changed.</p> <pre><code>@live\ndef setup:\n  tracks.setup([\n    tracks.mk(\"sampler\", 1, muted=False, volume=100),\n  ])\n</code></pre> <p>Returns:</p> Type Description <code>callable</code> <p>A decorator registering and executing the live function.</p>"},{"location":"reference/soir/#soir.log","title":"<code>log(message)</code>","text":"<p>Log a message to the console.</p> <p>This function is used to log messages to the console. It is useful for debugging purposes.</p> <pre><code>log(f'We are at beat {bpm.beat()}')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"reference/soir/#soir.loop","title":"<code>loop(beats=4, track=1, align=True)</code>","text":"<p>Decorator to create a loop that is rescheduled every given number of beats.</p> <p>The concept of a loop is similar to Sonic Pi's live loops. Code within a loop is executed using temporal recursion, and can be updated in real-time: the next run of the loop will execute the updated version. This provides a way to incrementally build audio performances by editing code. Loops should not be blocking as it would freeze the main thread. For this reason, blocking facilities such are <code>sleep</code> are provided by the engine.</p> <pre><code>@loop\ndef my_loop(beats=4, track=1):\n  log(\"Hello World\")\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>beats</code> <code>int</code> <p>The duration of the loop in beats.</p> <code>4</code> <code>track</code> <code>int</code> <p>The track to use.</p> <code>1</code> <code>align</code> <code>bool</code> <p>Whether to align the loop on its next beat sequence.</p> <code>True</code> <p>Returns:</p> Type Description <code>callable</code> <p>A decorator registering and scheduling the function in a loop.</p>"},{"location":"reference/soir/#soir.sleep","title":"<code>sleep(beats)</code>","text":"<p>Sleep for the given duration in beats in the current loop.</p> <p>In this example, we define a 4-beats loop that plays a kick sample every beats, and sleeps for 1 beat between each sample.</p> <pre><code>@loop\ndef my_loop(beats=4, track=1):\n   for i in range(4):\n      s.play('kick')\n      sleep(1)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>beats</code> <code>float</code> <p>The duration to sleep in beats.</p> required <p>Raises:</p> Type Description <code>NotInLiveLoopException</code> <p>If we are not in a loop.</p>"},{"location":"reference/tracks/","title":"\ud83c\udfac tracks","text":""},{"location":"reference/tracks/#soir.tracks","title":"<code>tracks</code>","text":"<p>The <code>tracks</code> module provides a way to setup and control tracks in the soir engine. A track has an instrument type and a set of parameters and effects. Once a track is created, loops can be scheduled on it. Tracks can be added &amp; removed in real-time using the <code>setup()</code> function, existing tracks are untouched.</p>"},{"location":"reference/tracks/#soir.tracks--cookbook","title":"Cookbook","text":""},{"location":"reference/tracks/#soir.tracks--setup-tracks","title":"Setup tracks","text":"<pre><code>tracks.setup([\n    tracks.mk('sampler', 0),\n    tracks.mk('sampler', 1),\n    tracks.mk('sampler', 2),\n])\n</code></pre>"},{"location":"reference/tracks/#soir.tracks--get-current-tracks","title":"Get current tracks","text":"<pre><code>trks = tracks.layout()\n</code></pre>"},{"location":"reference/tracks/#soir.tracks--reference","title":"Reference","text":""},{"location":"reference/tracks/#soir.tracks.Track","title":"<code>Track(instrument=None, track=None, muted=None, volume=None, pan=None, extra=None)</code>  <code>dataclass</code>","text":"<p>Representation of a Soir track.</p> <p>Attributes:</p> Name Type Description <code>instrument</code> <code>str</code> <p>The instrument type.</p> <code>track</code> <code>int</code> <p>The track id.</p> <code>muted</code> <code>bool | None</code> <p>The muted state. Defaults to None.</p> <code>volume</code> <code>float | None</code> <p>The volume. Defaults to None.</p> <code>pan</code> <code>float | None</code> <p>The pan. Defaults to None.</p> <code>extra</code> <code>dict | None</code> <p>Extra parameters. Defaults to None.</p>"},{"location":"reference/tracks/#soir.tracks.layout","title":"<code>layout()</code>","text":"<p>Get the current tracks.</p> <p>Returns:</p> Type Description <code>list[Track]</code> <p>list[Track]: The current tracks.</p> <p>Raises:</p> Type Description <code>InLoopException</code> <p>If called from inside a loop.</p>"},{"location":"reference/tracks/#soir.tracks.mk","title":"<code>mk(instrument, track, muted=None, volume=None, pan=None, extra=None)</code>","text":"<p>Creates a new track.</p> <p>Parameters:</p> Name Type Description Default <code>instrument</code> <code>str</code> <p>The instrument type.</p> required <code>track</code> <code>int</code> <p>The track number.</p> required <code>muted</code> <code>bool</code> <p>The muted state. Defaults to None.</p> <code>None</code> <code>volume</code> <code>float</code> <p>The volume. Defaults to None.</p> <code>None</code> <code>pan</code> <code>float</code> <p>The pan. Defaults to None.</p> <code>None</code> <code>extra</code> <code>dict</code> <p>Extra parameters. Defaults to None.</p> <code>None</code>"},{"location":"reference/tracks/#soir.tracks.mk_midi","title":"<code>mk_midi(track, muted=None, volume=None, pan=None, midi_device=0, audio_device=0)</code>","text":"<p>Creates a new midi track.</p> <p>Parameters:</p> Name Type Description Default <code>track</code> <code>int</code> <p>The track id.</p> required <code>muted</code> <code>bool</code> <p>The muted state. Defaults to None.</p> <code>None</code> <code>volume</code> <code>float</code> <p>The volume. Defaults to None.</p> <code>None</code> <code>pan</code> <code>float</code> <p>The pan. Defaults to None.</p> <code>None</code> <code>midi_device</code> <code>int</code> <p>The midi device. Defaults to -1.</p> <code>0</code> <code>audio_device</code> <code>int</code> <p>The audio device. Defaults to -1.</p> <code>0</code>"},{"location":"reference/tracks/#soir.tracks.mk_sampler","title":"<code>mk_sampler(track, muted=None, volume=None, pan=None, extra=None)</code>","text":"<p>Creates a new sampler track.</p> <p>Parameters:</p> Name Type Description Default <code>track</code> <code>int</code> <p>The track id.</p> required <code>muted</code> <code>bool</code> <p>The muted state. Defaults to None.</p> <code>None</code> <code>volume</code> <code>float</code> <p>The volume. Defaults to None.</p> <code>None</code> <code>pan</code> <code>float</code> <p>The pan. Defaults to None.</p> <code>None</code> <code>extra</code> <code>dict</code> <p>Extra parameters. Defaults to None.</p> <code>None</code>"},{"location":"reference/tracks/#soir.tracks.setup","title":"<code>setup(tracks)</code>","text":"<p>Setup tracks.</p> <p>Parameters:</p> Name Type Description Default <code>tracks</code> <code>list[Track]</code> <p>The tracks to setup.</p> required <p>Raises:</p> Type Description <code>InLoopException</code> <p>If called from inside a loop.</p>"}]}