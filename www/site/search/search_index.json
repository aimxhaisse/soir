{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NEON","text":"<p>Live Coding Environment</p>"},{"location":"about/","title":"About","text":""},{"location":"architecture/","title":"Architecture","text":"<pre><code>graph LR\n  subgraph Backend\n\n    Neon\n    Rt\n    Dsp\n    Gfx\n\n  end\n\n  subgraph Client\n\n    Agent\n\n  end\n\n  Agent &lt;-- gRPC --&gt; Neon\n  Neon &lt;--&gt; Rt\n  Rt &lt;--&gt; Gfx\n  Neon &lt;--&gt; Dsp\n  Neon &lt;--&gt; Gfx\n  Rt &lt;--&gt; Dsp</code></pre>"},{"location":"architecture/#design-choices","title":"Design Choices","text":""},{"location":"architecture/#patterns","title":"Patterns","text":"<p>Consistency is key as it will become complex with time, some arbitrary patterns we are using:</p> <ul> <li>Threads are handled by the object and not the caller</li> <li>Threads implement <code>Init/Start/Stop</code> pattern</li> </ul>"},{"location":"architecture/#runtime-routines","title":"Runtime Routines","text":""},{"location":"architecture/#sync-outside-of-loops","title":"Sync outside of loops","text":"<p>Synchronuous routines that take time should not happen within loop, as they will screw the timing of events. Prefer allowing them in the global context: they might only delay evaluation of the next loop update, which will have the loops repeat once more for their duration but without being a total disaster.</p> <p>Examples:</p> <ul> <li>loading a sample directory</li> <li>getting the list of samples</li> <li>creating a websocket or a Unix thread</li> </ul>"},{"location":"architecture/#async-from-loops","title":"Async from loops","text":"<p>Conversely, events going from loops should use MIDI as they are async and return immediately, later on we can add timing information into them and properly handle eventual interpretation lag.</p> <p>Examples:</p> <ul> <li>playing a specific sample via MIDI</li> </ul>"},{"location":"reference/sampler/","title":"sampler","text":"Info <p>The sampler module is available via <code>n.sampler</code> and can be used on loops with instrument type set to <code>mono_sampler</code>.</p>"},{"location":"reference/sampler/#neon.sampler","title":"<code>sampler</code>","text":"<p>Samples, lots of samples.</p> <p>The sampler module provides a way to load samples and play them inside loops in an intuitive way. Once instantiated, a <code>Sampler</code> can be used to play samples from the selected pack given their name. If no exact match of the sample name is found, the first matching sample is selected. The cost of creating and using a sampler is cheap so it is fine to have a lot of instances at once.</p>"},{"location":"reference/sampler/#neon.sampler--cookbook","title":"Cookbook","text":""},{"location":"reference/sampler/#neon.sampler--play-samples","title":"Play samples","text":"<pre><code>s = n.sampler.new('808')\n\n@loop\ndef kick(beats=4):\n  for i in range(4):\n    s.play('kick')\n    sleep(1)\n</code></pre>"},{"location":"reference/sampler/#neon.sampler--list-available-packs","title":"List available packs","text":"<pre><code>packs = n.sampler.packs()\n</code></pre>"},{"location":"reference/sampler/#neon.sampler--list-samples-in-a-pack","title":"List samples in a pack","text":"<pre><code>samples = n.sampler.samples('808')\n</code></pre>"},{"location":"reference/sampler/#neon.sampler--reference","title":"Reference","text":""},{"location":"reference/sampler/#neon.sampler.Sample","title":"<code>Sample(name, pack, path, duration)</code>  <code>dataclass</code>","text":"<p>A sample is a sound file that can be played by a sampler. It has a name, a pack, a path, and a duration. The name is the identifier used to play the sample, the pack is the name of the pack the sample belongs to, the path is the location of the sample file, and the duration is the length of the sample in seconds.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the sample.</p> <code>pack</code> <code>str</code> <p>The name of the pack.</p> <code>path</code> <code>str</code> <p>The location of the sample file.</p> <code>duration</code> <code>float</code> <p>The length of the sample in seconds.</p>"},{"location":"reference/sampler/#neon.sampler.Sampler","title":"<code>Sampler(pack_name)</code>","text":"<p>Creates a new sampler with samples from the designated pack.</p> Note <p>You can create a Sampler via the shortcut <code>n.sampler.new()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>pack_name</code> <code>str</code> <p>The name of the sample pack to use.</p> required"},{"location":"reference/sampler/#neon.sampler.Sampler.play","title":"<code>play(name, loop=False, length=None, start=0.0, rev=False)</code>","text":"<p>Plays a sample by its given name. If there is no exact match, attempts to find one that contains the name (for example, 'kick' will match 'hard-kick'). If the selected sample is already being played, enqueues a new one, allowing to play simultaneously multiple times the same sample.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the sample.</p> required <code>loop</code> <code>bool</code> <p>Whether to loop the sample or not. If the sample is looping, it will play forever unless a length is specified, or it is explictly stopped.</p> <code>False</code> <code>length</code> <code>float | None</code> <p>Duration in seconds. If None, the sample is played for its entired duration.</p> <code>None</code> <code>start</code> <code>float</code> <p>When to start playing the sample in seconds.</p> <code>0.0</code> <code>rev</code> <code>bool</code> <p>Whether to reverse the sample or not.</p> <code>False</code>"},{"location":"reference/sampler/#neon.sampler.Sampler.stop","title":"<code>stop(name)</code>","text":"<p>Stops playing the sample. If there is no exact match, attempts to find one that contains the name (for example, 'kick' will match 'hard-kick'). If the same sample is currently played multiple times, the latest one is selected to stop (LIFO).</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the sample.</p> required"},{"location":"reference/sampler/#neon.sampler.get_packs","title":"<code>get_packs()</code>","text":"<p>Returns the list of available sample packs.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>The list of loaded sample packs.</p>"},{"location":"reference/sampler/#neon.sampler.get_samples","title":"<code>get_samples(pack_name)</code>","text":"<p>Returns the list of samples available in the given pack.</p> <p>Parameters:</p> Name Type Description Default <code>pack_name</code> <code>str</code> <p>The name of the sample pack.</p> required <p>Returns:</p> Type Description <code>list[Sample]</code> <p>The list of samples from the sample pack.</p>"}]}