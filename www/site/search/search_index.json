{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SOIR","text":""},{"location":"arch/","title":"Architecture","text":"<p>Soir is composed of two main parts:</p> <ul> <li>The RT engine which schedules Python loops,</li> <li>The DSP engine which continuously produces blocks of sounds.</li> </ul> <p>As a general rule, only the RT engine can execute Python code: its main loop takes the GIL lock, then executes callback functions or code updates which in turn call Python code.</p> <p>The RT engine instruments how the DSP engine should produce sounds, and to do so it has two main ways of doing it.</p>"},{"location":"arch/#c-bindings-blocking","title":"C++ Bindings (blocking)","text":"<p>The Python code can directly call blocking C++ bindings that target the DSP engine. Such bindings can sometimes be slow, such as setting up a new track or adding an effect, and as a result are meant to be wrapped in @live decorators which are executed upon code change (rarely).</p>"},{"location":"arch/#midi-events-async","title":"MIDI Events (async)","text":"<p>The Python code can also schedule MIDI events which contains timing-sensitive actions such as, starting to play a sample, mute a track. Whenever they are emitted, time is kept to try to interpret them as close as possible to where they should fit in the DSP blocks. This is the recommended way to instrument DSP code from within <code>@loop</code> decorated functions.</p> <p>MIDI was chosen here but it may be a better approach in the future to switch to OSC as it can carry timing information itself, and also has a more flexible way to provide parameters.</p>"},{"location":"arch/#time-handling","title":"Time Handling","text":"<p>On the DSP side, the time is represented by an absolute time in microseconds and a <code>SampleTick</code> (the number of samples produced so far). On the RT side, the time is represented by a fractional beat which is not necessarily linear as it can be modulated by the BPM setting.</p> <p>Whenever a MIDI event is scheduled, the RT engine can convert the current beat offset in the loop to an exact <code>SampleTick</code> for the DSP code to properly trigger the event. Because the RT code can take time to execute and propagate its events, it can be slightly late and jitter around the exact scheduling. For this reason, the DSP thread runs in the past and its clock is offset by a few milliseconds (<code>kBlockProcessingDelay</code> blocks, around ~70ms). This lets time for MIDI events to flow through the DSP engine and arrive on time.</p>"},{"location":"guides/","title":"Guides","text":"<ul> <li>Quick start</li> <li>How to make your sample pack</li> <li>How to setup tracks</li> </ul>"},{"location":"guides/make-your-pack/","title":"How to Make Your Sample Pack","text":"<p>In this guide we show how to make your sample pack for <code>soir</code>.</p>"},{"location":"guides/make-your-pack/#preparing-samples","title":"Preparing Samples","text":"<p>Sample packs can be built from a directory containing WAV files, the first step is to convert them to 48kHz, this can be done using the <code>sample-convert-48khz</code> command:</p> <pre><code>soir sample-convert-48khz sample-pack\n</code></pre> <p>Where <code>sample-pack</code> point to a directory containing your samples.</p> <p>Info</p> <p>The conversion is done in-place, your current samples will be replaced by 48kHz ones. This is a destructive operation so make sure you keep your original samples in a safe place.</p>"},{"location":"guides/make-your-pack/#creating-the-sample-pack","title":"Creating the Sample Pack","text":"<p>In <code>soir</code>, a sample pack is composed of a reference file containing a description of each sample and an associated directory in which actual samples are. To generate the reference file, use the <code>sample-mk-pack</code> command:</p> <pre><code>soir sample-mk-pack sample-pack\n</code></pre> <p>This results in a <code>sample-pack.pack.yaml</code> file.</p>"},{"location":"guides/make-your-pack/#install-pack","title":"Install Pack","text":"<p>You can now install your pack using the <code>sample-install-pack</code> command:</p> <pre><code>soir sample-install-pack sample-pack\n</code></pre> <p>This copies the reference file and the sample directory in the <code>SOIR_DIR</code> directory, so that it can be used in your live sessions:</p> <pre><code>s = sampler.new('sample-pack')\n\n@loop\ndef kick(beats=4):\n    for i in range(4):\n        s.play('kick')\n        sleep(1)\n</code></pre>"},{"location":"guides/quickstart/","title":"Quick Start","text":""},{"location":"guides/quickstart/#installation","title":"Installation","text":"<p>Run this command to install soir on your system:</p> <pre><code>curl -sL https://soir.dev/install.sh | bash\n</code></pre> <p>Then add the following to your shell configuration:</p> <pre><code>export SOIR_DIR=\"$HOME/.soir\"\nexport PATH=\"${SOIR_DIR}/bin:$PATH\"\n</code></pre> <p>For now, only Mac OS with M processors are supported.</p>"},{"location":"guides/quickstart/#your-first-session","title":"Your First Session","text":"<p>Let's start by installing the <code>hazardous</code> sample pack:</p> <pre><code>soir sample-install-pack hazardous\n</code></pre> <p>Now we can create a new soir session and run it:</p> <pre><code>soir session-new session-0x01\nsoir session-run session-0x01\n</code></pre> <p>Then in another terminal, open the <code>session-0x01/live.py</code> file and paste the following:</p> <pre><code>@live()\ndef setup():\n    bpm.set(120)\n\n    tracks.setup({\n        'exp': tracks.mk_sampler(),\n    })\n\nsp = sampler.new('hazardous')\n\n@loop(track='exp', beats=8)\ndef hazardous():\n    sp.play('synth-filter2', pan=rnd.between(-1.0, 1.0))\n</code></pre>"},{"location":"guides/setup-tracks/","title":"How to setup tracks","text":"<p>In this guide we show how to setup tracks.</p>"},{"location":"guides/setup-tracks/#overview","title":"Overview","text":"<p>Tracks can be configured via the tracks.setup call as follows:</p> <pre><code>@live()\ndef setup():\n    tracks.setup({\n      'track-1': tracks.mk_sampler(volume=0.5, pan=0.35, fx=[]),\n      'track-2': tracks.mk_sampler(),\n      'track-3': tracks.mk_sampler(),\n    })\n</code></pre> <p>This call can potentially do heavy operations such as instanciating new tracks and effects if they don't exist. It is sound to call it once in a live function, to execute it upon code updates if the track layout changes.</p>"},{"location":"guides/setup-tracks/#track-settings","title":"Track Settings","text":"<p>All tracks have the following settings which can be bound to dynamic control parameters or direct values:</p> <ul> <li>volume</li> <li>pan</li> <li>muted</li> </ul> <p>Here is an example of two sampler tracks, one with an LFO on the volume, the other with a direct value:</p> <pre><code>@live()\ndef controls():\n    ctrls.mk_lfo('[x1]', rate=0.5, intensity=0.75)\n\n@live()\ndef setup():\n    tracks.setup({\n      'track-1': tracks.mk_sampler(volume=ctrl('[x0]')),\n      'track-2': tracks.mk_sampler(volume=0.65),\n    })\n</code></pre>"},{"location":"guides/setup-tracks/#sampler-instrument","title":"Sampler Instrument","text":"<p>A track can be assigned to a sampler instrument via the tracks.mk_sampler function as follows:</p> <pre><code>@live()\ndef setup():\n    tracks.setup({\n      'track-1': tracks.mk_sampler(),\n    })\n</code></pre>"},{"location":"guides/setup-tracks/#external-instrument","title":"External Instrument","text":""},{"location":"reference/bpm/","title":"\u23f3 bpm","text":""},{"location":"reference/bpm/#soir.bpm","title":"<code>bpm</code>","text":"<p>The bpm module provides a way to set the tempo of the current session. The tempo is a global setting that affects all loops and samples, it is measured in beats per minute (BPM) and can be adjusted in real-time.</p>"},{"location":"reference/bpm/#soir.bpm--cookbook","title":"Cookbook","text":""},{"location":"reference/bpm/#soir.bpm--set-the-tempo","title":"Set the tempo","text":"<pre><code>bpm.set(120)\n</code></pre>"},{"location":"reference/bpm/#soir.bpm--get-the-current-tempo","title":"Get the current tempo","text":"<pre><code>tempo = bpm.get()\n</code></pre>"},{"location":"reference/bpm/#soir.bpm--get-the-current-beat","title":"Get the current beat","text":"<pre><code>beat = bpm.beat()\n</code></pre>"},{"location":"reference/bpm/#soir.bpm--reference","title":"Reference","text":""},{"location":"reference/bpm/#soir.bpm.beat","title":"<code>beat()</code>","text":"<p>Get the current beat.</p> <p>Returns:</p> Type Description <code>float</code> <p>The current beat.</p>"},{"location":"reference/bpm/#soir.bpm.get","title":"<code>get()</code>","text":"<p>Get the BPM. This function can only be called from the global    scope.</p> <p>Returns:</p> Type Description <code>float</code> <p>The current BPM.</p> <p>Raises:</p> Type Description <code>InLoopException</code> <p>If called from inside a loop.</p>"},{"location":"reference/bpm/#soir.bpm.set","title":"<code>set(bpm)</code>","text":"<p>Set the BPM. This function can only be called from the global    scope.</p> <p>Parameters:</p> Name Type Description Default <code>bpm</code> <code>float</code> <p>The new BPM.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The new BPM.</p> <p>Raises:</p> Type Description <code>InLoopException</code> <p>If called from inside a loop.</p>"},{"location":"reference/ctrls/","title":"\ud83c\udf9b\ufe0f controls","text":""},{"location":"reference/ctrls/#soir.ctrls","title":"<code>ctrls</code>","text":"<p>The ctrls module contains facilities to control settings of soir in real-time.</p>"},{"location":"reference/ctrls/#soir.ctrls--cookbook","title":"Cookbook","text":"<pre><code>@live()\ndef controls():\n    ctrls.mk_lfo('[x0]', rate=0.5, intensity=0.75)\n\nsp = samples.new('my-pack')\n\n@loop()\ndef play():\n    sp.play('my-sample', pan=ctrl('[x0]'))\n</code></pre>"},{"location":"reference/ctrls/#soir.ctrls.Control","title":"<code>Control()</code>","text":"<p>               Bases: <code>Control_</code></p> <p>Base class for a control.</p> <p>A control computes a value to the Soir engine about 100 times per second via the <code>Control.fwd()</code> call, this value is then interpolated by the C++ engine to provide a smooth transition between values.</p> <p>The Control class is not meant to be created directly unless you want to implement your own control, helpers are available to create specific controls (see below).</p> <p>Once a control is created, it can be referred to by using the <code>ctrl('name')</code> facility and can passed as a parameter to instrument calls or FXs.</p>"},{"location":"reference/ctrls/#soir.ctrls.Control.__repr__","title":"<code>__repr__()</code>","text":"<p>Get the string representation of the control.</p>"},{"location":"reference/ctrls/#soir.ctrls.Control.fwd","title":"<code>fwd()</code>","text":"<p>Computes the next value of the control and advance the tick.</p> <p>This is meant to be used by the soir engine.</p>"},{"location":"reference/ctrls/#soir.ctrls.Control.get","title":"<code>get()</code>","text":"<p>Get the current value of the control.</p> <p>Returns:</p> Type Description <code>float</code> <p>The current value of the control.</p>"},{"location":"reference/ctrls/#soir.ctrls.Control.name","title":"<code>name()</code>","text":"<p>Get the name of the control.</p> <p>Returns:</p> Type Description <code>str</code> <p>The name of the control.</p>"},{"location":"reference/ctrls/#soir.ctrls.Control.set","title":"<code>set(**params)</code>","text":"<p>Set the control parameters.</p> <p>Parameters:</p> Name Type Description Default <code>**params</code> <p>The parameters to set.</p> <code>{}</code>"},{"location":"reference/ctrls/#soir.ctrls.layout","title":"<code>layout()</code>","text":"<p>Get the list of all controls.</p> <p>Returns:</p> Type Description <code>list[Control]</code> <p>A list of all controls.</p>"},{"location":"reference/ctrls/#soir.ctrls.mk_func","title":"<code>mk_func(name, func)</code>","text":"<p>Create a new function parameter.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the parameter.</p> required <code>func</code> <code>callable</code> <p>The function to compute the value.</p> required"},{"location":"reference/ctrls/#soir.ctrls.mk_lfo","title":"<code>mk_lfo(name, rate, intensity=1.0)</code>","text":"<p>Create a new LFO parameter.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the parameter.</p> required <code>rate</code> <code>float</code> <p>The rate of the LFO in seconds.</p> required <code>intensity</code> <code>float</code> <p>The intensity of the LFO.</p> <code>1.0</code>"},{"location":"reference/ctrls/#soir.ctrls.mk_linear","title":"<code>mk_linear(name, start, end, duration)</code>","text":"<p>Create a new linear parameter.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the parameter.</p> required <code>start</code> <code>float</code> <p>The start value.</p> required <code>end</code> <code>float</code> <p>The end value.</p> required <code>duration</code> <code>float</code> <p>The duration of the transition in seconds.</p> required"},{"location":"reference/ctrls/#soir.ctrls.mk_val","title":"<code>mk_val(name, value)</code>","text":"<p>Create a new value parameter.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the parameter.</p> required <code>value</code> <code>float</code> <p>The value.</p> required"},{"location":"reference/errors/","title":"\ud83d\udd25 errors","text":""},{"location":"reference/errors/#soir.errors","title":"<code>errors</code>","text":"<p>The errors module contains exceptions raised by the Soir engine to signal errors at runtime.</p>"},{"location":"reference/errors/#soir.errors.ControlNotFoundException","title":"<code>ControlNotFoundException</code>","text":"<p>               Bases: <code>SoirException</code></p> <p>Raised when trying to use an unknown control.</p> <p>In Soir, controls are used to change settings in real-time and are orchestrated by the engine. This exception is raised if an undefined control is used.</p>"},{"location":"reference/errors/#soir.errors.InLoopException","title":"<code>InLoopException</code>","text":"<p>               Bases: <code>SoirException</code></p> <p>Raised when trying to execute code inside a live context.</p> <p>In Soir, some of the code is expected to be used from the global scope as it affects everything, for example, setting the BPM. This exception is raised if such code is called from a loop.</p>"},{"location":"reference/errors/#soir.errors.NotInControlLoopException","title":"<code>NotInControlLoopException</code>","text":"<p>               Bases: <code>SoirException</code></p> <p>Raised when trying to use a control outside of a control loop.</p> <p>In Soir, controls are used to change settings in real-time and are orchestrated by the engine. This exception is raised if a control is instrumented from outside of the Soir control loop.</p>"},{"location":"reference/errors/#soir.errors.NotInLoopException","title":"<code>NotInLoopException</code>","text":"<p>               Bases: <code>SoirException</code></p> <p>Raised when trying to execute code outside of a live context.</p> <p>In Soir, some of the code is expected to be used from within a loop or a live function, for instance sleeping between two instructions. This exception is raised if such code is called from the global scope.</p>"},{"location":"reference/errors/#soir.errors.SoirException","title":"<code>SoirException</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for Soir exceptions.</p>"},{"location":"reference/errors/#soir.errors.UnknownMidiTrackException","title":"<code>UnknownMidiTrackException</code>","text":"<p>               Bases: <code>SoirException</code></p> <p>Raised when trying to use an invalid MIDI track.</p> <p>In Soir, MIDI tracks are used to send MIDI events to the external synthesizer. This exception is raised if an invalid MIDI track is used.</p>"},{"location":"reference/fx/","title":"\ud83e\ude9b fx","text":""},{"location":"reference/fx/#soir.fx","title":"<code>fx</code>","text":"<p>The <code>fx</code> module provides a set of audio effects that can be applied to tracks in the soir engine. Each track can have a set of effects with corresponding parameters, which are typically defined using the <code>tracks.setup()</code> function.</p>"},{"location":"reference/fx/#soir.fx--cookbook","title":"Cookbook","text":""},{"location":"reference/fx/#soir.fx--setup-tracks-with-effects","title":"Setup tracks with effects","text":"<pre><code>tracks.setup({\n    'bass': tracks.mk_sampler(fxs={\n        'rev': fx.mk_chorus(),\n    }),\n})\n</code></pre>"},{"location":"reference/fx/#soir.fx.Fx","title":"<code>Fx(name='unnamed', type='unknown', mix=None, extra=None)</code>  <code>dataclass</code>","text":"<p>Representation of a Soir FX.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the effect.</p> <code>type</code> <code>str</code> <p>The effect type.</p> <code>mix</code> <code>float | None</code> <p>The mix parameter of the effect. Defaults to None.</p> <code>extra</code> <code>str | None</code> <p>Extra parameters for the effect, JSON encoded. Defaults to None.</p>"},{"location":"reference/fx/#soir.fx.mk","title":"<code>mk(type, mix=None, extra=None)</code>","text":"<p>Creates a new Fx.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str</code> <p>The effect type.</p> required <code>mix</code> <code>float</code> <p>The mix parameter of the effect. Defaults to None.</p> <code>None</code> <code>extra</code> <code>dict</code> <p>The extra parameters of the effect. Default to None.</p> <code>None</code>"},{"location":"reference/fx/#soir.fx.mk_chorus","title":"<code>mk_chorus(time=0.5, depth=0.5, rate=0.5)</code>","text":"<p>Creates a new Chorus FX.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>float | Control</code> <p>The time parameter of the chorus effect. Defaults to 0.5.</p> <code>0.5</code> <code>depth</code> <code>float | Control</code> <p>The depth parameter of the chorus effect. Defaults to 0.5.</p> <code>0.5</code> <code>rate</code> <code>float | Control</code> <p>The rate parameter of the chorus effect. Defaults to 0.5.</p> <code>0.5</code>"},{"location":"reference/fx/#soir.fx.mk_lpf","title":"<code>mk_lpf(mix=None, cutoff=0.5)</code>","text":"<p>Creates a new Low Pass Filter FX.</p> <p>Parameters:</p> Name Type Description Default <code>mix</code> <p>The mix parameter of the low pass filter effect. Defaults to None.</p> <code>None</code> <code>cutoff</code> <code>float | Control</code> <p>The cutoff frequency of the low pass filter in the [0.0, 1.0] range. Defaults to 0.5.</p> <code>0.5</code>"},{"location":"reference/fx/#soir.fx.mk_reverb","title":"<code>mk_reverb(mix=None, time=0.01, wet=0.75, dry=0.25)</code>","text":"<p>Creates a new Reverb FX.</p> <p>Parameters:</p> Name Type Description Default <code>mix</code> <p>The mix parameter of the chorus effect. Defaults to None.</p> <code>None</code> <code>time</code> <p>The time parameter of the reverb effect in the [0.0, 1.0] range. Defaults to 0.01.</p> <code>0.01</code> <code>dry</code> <p>The dry parameter of the reverb effect in the [0.0, 1.0] range. Defaults to 0.25.</p> <code>0.25</code> <code>wet</code> <p>The wet parameter of the reverb effect in the [0.0, 1.0] range. Defaults to 0.75.</p> <code>0.75</code>"},{"location":"reference/midi/","title":"\ud83c\udfbc midi","text":""},{"location":"reference/midi/#soir.midi","title":"<code>midi</code>","text":"<p>The midi module provides a way to communicate with external synthesizers.</p>"},{"location":"reference/midi/#soir.midi--cookbook","title":"Cookbook","text":"<pre><code>with midi.use_chan(1):\n  midi.note_on(60)\n  sleep(1)\n  midi.note_off(60)\n</code></pre>"},{"location":"reference/midi/#soir.midi--reference","title":"Reference","text":""},{"location":"reference/midi/#soir.midi.use_chan","title":"<code>use_chan(chan)</code>","text":"<p>Context manager to set the MIDI channel to use.</p> <p><code>use_chan</code> can be used to send MIDI events to a specific channel. It can be used as a context manager to set the MIDI channel to use, or as a function from within a loop.</p> <p>Examples:</p> <pre><code>@loop(track='bass', beats=4)\ndef my_loop:\n    # This block will send MIDI events to channel 1 on the 'bass' track.\n    with midi.use_chan(1):\n        midi.note_on(60)\n        sleep(1)\n        midi.note_off(60)\n\n   # From this point on, MIDI events will be sent to channel 3 on the 'bass' track.\n   midi.use_chan(3)\n   midi.note_on(60)\n</code></pre>"},{"location":"reference/midi/#soir.midi.note","title":"<code>note(note, duration, velocity=127, chan=None)</code>","text":"<p>Send the MIDI note on and off to the external synthesizer using the track id of the loop as MIDI channel.</p> <p>Parameters:</p> Name Type Description Default <code>note</code> <code>int</code> <p>The MIDI note to send.</p> required <code>duration</code> <code>float</code> <p>The duration of the note in beats.</p> required <code>velocity</code> <code>int</code> <p>The velocity. Defaults to 127.</p> <code>127</code> <code>chan</code> <code>int | None</code> <p>The MIDI chan to send the note to.</p> <code>None</code> <p>Raises:</p> Type Description <code>NotInLoopException</code> <p>If called from outside a loop.</p>"},{"location":"reference/midi/#soir.midi.note_off","title":"<code>note_off(note, velocity=127, chan=None)</code>","text":"<p>Send the MIDI note off to the external synthesizer using the track id of the loop as MIDI channel.</p> <p>Parameters:</p> Name Type Description Default <code>note</code> <code>int</code> <p>The MIDI note to stop.</p> required <code>velocity</code> <code>int</code> <p>The velocity. Defaults to 127.</p> <code>127</code> <code>chan</code> <code>int | None</code> <p>The MIDI chan to stop the note on. Uses the value from use_chan() if not provided.</p> <code>None</code> <p>Raises:</p> Type Description <code>NotInLoopException</code> <p>If called from outside a loop.</p>"},{"location":"reference/midi/#soir.midi.note_on","title":"<code>note_on(note, velocity=127, chan=None)</code>","text":"<p>Send the MIDI note to the external synthesizer configured on the track. Args:     note: The MIDI note to send.     velocity: The velocity. Defaults to 127.     chan: The MIDI chan to send the note to. Uses the value from use_chan() if not provided.</p> <p>Raises:</p> Type Description <code>NotInLoopException</code> <p>If called from outside a loop.</p>"},{"location":"reference/rnd/","title":"\ud83c\udfb2 rnd","text":""},{"location":"reference/rnd/#soir.rnd","title":"<code>rnd</code>","text":"<p>The rnd module provides facilities to introduce randomness in the composition.</p>"},{"location":"reference/rnd/#soir.rnd--cookbook","title":"Cookbook","text":""},{"location":"reference/rnd/#soir.rnd--get-a-random-number-between-two-values","title":"Get a random number between two values","text":"<pre><code>rnd.between(1, 10)\n</code></pre>"},{"location":"reference/rnd/#soir.rnd--reference","title":"Reference","text":""},{"location":"reference/rnd/#soir.rnd.between","title":"<code>between(begin, end)</code>","text":"<p>Get a random number between two values.</p> <p>Parameters:</p> Name Type Description Default <code>begin</code> <code>float</code> <p>The lower bound.</p> required <code>end</code> <code>float</code> <p>The upper bound.</p> required"},{"location":"reference/rnd/#soir.rnd.one_in","title":"<code>one_in(chance)</code>","text":"<p>Returns True with a chance of 1 in <code>chance</code>.</p> <p>Parameters:</p> Name Type Description Default <code>chance</code> <code>int</code> <p>The chance of returning True.</p> required"},{"location":"reference/sampler/","title":"\ud83d\udcfc sampler","text":""},{"location":"reference/sampler/#soir.sampler","title":"<code>sampler</code>","text":"Info <p>The sampler module can be used on loops running on tracks with instrument type set to <code>sampler</code>.</p> <p>The sampler module provides a way to load samples and play them inside loops in an intuitive way. Once instantiated, a <code>Sampler</code> can be used to play samples from the selected pack given their name. If no exact match of the sample name is found, the first matching sample is selected. The cost of creating and using a sampler is cheap so it is fine to have a lot of instances at once.</p>"},{"location":"reference/sampler/#soir.sampler--cookbook","title":"Cookbook","text":""},{"location":"reference/sampler/#soir.sampler--play-samples","title":"Play samples","text":"<pre><code>s = sampler.new('808')\n\n@loop\ndef kick(beats=4):\n  for i in range(4):\n    s.play('kick')\n    sleep(1)\n</code></pre>"},{"location":"reference/sampler/#soir.sampler--list-available-packs","title":"List available packs","text":"<pre><code>packs = sampler.packs()\n</code></pre>"},{"location":"reference/sampler/#soir.sampler--list-samples-in-a-pack","title":"List samples in a pack","text":"<pre><code>samples = sampler.samples('808')\n</code></pre>"},{"location":"reference/sampler/#soir.sampler--reference","title":"Reference","text":""},{"location":"reference/sampler/#soir.sampler.Sample","title":"<code>Sample(name, pack, path, duration)</code>  <code>dataclass</code>","text":"<p>A sample is a sound file that can be played by a sampler. It has a name, a pack, a path, and a duration. The name is the identifier used to play the sample, the pack is the name of the pack the sample belongs to, the path is the location of the sample file, and the duration is the length of the sample in seconds.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the sample.</p> <code>pack</code> <code>str</code> <p>The name of the pack.</p> <code>path</code> <code>str</code> <p>The location of the sample file.</p> <code>duration</code> <code>float</code> <p>The length of the sample in seconds.</p>"},{"location":"reference/sampler/#soir.sampler.Sampler","title":"<code>Sampler(pack_name)</code>","text":"<p>Creates a new sampler with samples from the designated pack.</p> Note <p>You can create a Sampler via the shortcut <code>n.sampler.new()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>pack_name</code> <code>str</code> <p>The name of the sample pack to use.</p> required"},{"location":"reference/sampler/#soir.sampler.Sampler.play","title":"<code>play(name, start=0.0, end=1.0, pan=0.0, attack=0.0, decay=0.0, sustain=None, level=1.0, release=0.0, rate=1.0, amp=1.0)</code>","text":"<p>Plays a sample by its given name. If there is no exact match, attempts to find one that contains the name (for example, 'kick' will match 'hard-kick'). If the selected sample is already being played, enqueues a new one, allowing to play simultaneously multiple times the same sample.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the sample.</p> required <code>start</code> <code>float</code> <p>When in the sample to start playing in the [0.0, 1.0] range.</p> <code>0.0</code> <code>end</code> <code>float</code> <p>When in the sample to end playing in the [0.0, 1.0] range.</p> <code>1.0</code> <code>pan</code> <code>float | Control</code> <p>The panning of the sample in the [-1.0, 1.0] range, or a control.</p> <code>0.0</code> <code>attack</code> <code>float</code> <p>The attack time in seconds.</p> <code>0.0</code> <code>decay</code> <code>float</code> <p>The decay time in seconds.</p> <code>0.0</code> <code>sustain</code> <code>float | None</code> <p>The sustain time in seconds, infered from the sample duration if None.</p> <code>None</code> <code>release</code> <code>float</code> <p>The release time in seconds.</p> <code>0.0</code> <code>level</code> <code>float</code> <p>The sustain level in the [0.0, 1.0] range.</p> <code>1.0</code> <code>rate</code> <code>float</code> <p>The playback rate of the sample.</p> <code>1.0</code> <code>amp</code> <code>float</code> <p>The amplitude of the sample.</p> <code>1.0</code>"},{"location":"reference/sampler/#soir.sampler.Sampler.stop","title":"<code>stop(name)</code>","text":"<p>Stops playing the sample. If there is no exact match, attempts to find one that contains the name (for example, 'kick' will match 'hard-kick'). If the same sample is currently played multiple times, the latest one is selected to stop (LIFO).</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the sample.</p> required"},{"location":"reference/sampler/#soir.sampler.new","title":"<code>new(pack_name)</code>","text":"<p>Creates a new sampler with samples from the designated pack.</p> <p>Parameters:</p> Name Type Description Default <code>pack_name</code> <code>str</code> <p>The name of the sample pack to use.</p> required"},{"location":"reference/sampler/#soir.sampler.packs","title":"<code>packs()</code>","text":"<p>Returns the list of available sample packs.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>The list of loaded sample packs.</p>"},{"location":"reference/sampler/#soir.sampler.samples","title":"<code>samples(pack_name)</code>","text":"<p>Returns the list of samples available in the given pack.</p> <p>Parameters:</p> Name Type Description Default <code>pack_name</code> <code>str</code> <p>The name of the sample pack.</p> required <p>Returns:</p> Type Description <code>list[Sample]</code> <p>The list of samples from the sample pack.</p>"},{"location":"reference/soir/","title":"\u2728 soir","text":""},{"location":"reference/soir/#soir","title":"<code>soir</code>","text":"<p>Soir is a Python library for live coding music. It provides facilities to create and manipulate audio tracks, and to interact with external synthesizers. There are two important concepts in Soir:</p> <ul> <li> <p>Live functions (<code>@live</code> decorator)     that are executed each time the code is changed. They are used to     setup the environment, and to create tracks and instruments.</p> </li> <li> <p>Loops functions (<code>@loop</code>     decorator) that are rescheduled every given number of beats. They     are used to create patterns and sequences.</p> </li> </ul> <pre><code># Live function\n@live\ndef setup():\n    bpm.set(120)\n\n# Loop function\n@loop(beats=1)\ndef kick():\n    log('beat')\n</code></pre> <p>Soir's facilities are organized in modules that are accessible from the global context. For example, to set the BPM, you can use <code>bpm.set(120)</code> without having to explicitly import the <code>bpm</code> module. The available modules are:</p> <ul> <li>bpm</li> <li>ctrls</li> <li>tracks</li> <li>fx</li> <li>midi</li> <li>errors</li> <li>sampler</li> <li>rnd</li> </ul>"},{"location":"reference/soir/#soir--cookbook","title":"Cookbook","text":""},{"location":"reference/soir/#soir--minimalistic-example","title":"Minimalistic Example","text":"<pre><code>@live\ndef setup():\n    bpm.set(120)\n\n    tracks.setup({\n        'sampler': tracks.mk_sampler(muted=False, volume=100),\n    })\n\ns = sampler.new('passage')\n\n@loop(track='sampler', beats=4)\ndef kick():\n    for i in range(4):\n        s.play('kick')\n        sleep(1)\n</code></pre>"},{"location":"reference/soir/#soir--reference","title":"Reference","text":""},{"location":"reference/soir/#soir.ctrl","title":"<code>ctrl(name)</code>","text":"<p>Get a control by its name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the control.</p> required <p>Returns:</p> Type Description <code>Control</code> <p>The control.</p>"},{"location":"reference/soir/#soir.live","title":"<code>live()</code>","text":"<p>Decorator to create a live function that is executed each time the code is changed.</p> <pre><code>@live\ndef setup:\n  tracks.setup({\n    'bass': tracks.mk(\"sampler\", 1, muted=False, volume=100),\n  })\n</code></pre> <p>Returns:</p> Type Description <code>callable</code> <p>A decorator registering and executing the live function.</p>"},{"location":"reference/soir/#soir.log","title":"<code>log(message)</code>","text":"<p>Log a message to the console.</p> <p>This function is used to log messages to the console. It is useful for debugging purposes.</p> <pre><code>log(f'We are at beat {bpm.beat()}')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"reference/soir/#soir.loop","title":"<code>loop(track=None, beats=4, align=True)</code>","text":"<p>Decorator to create a loop that is rescheduled every given number of beats.</p> <p>The concept of a loop is similar to Sonic Pi's live loops. Code within a loop is executed using temporal recursion, and can be updated in real-time: the next run of the loop will execute the updated version. This provides a way to incrementally build audio performances by editing code. Loops should not be blocking as it would freeze the main thread. For this reason, blocking facilities such are <code>sleep</code> are provided by the engine.</p> <pre><code>@loop('bass', beats=4, track=1)\ndef my_loop():\n  log(\"Hello World\")\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>track</code> <code>str</code> <p>The track to use.</p> <code>None</code> <code>beats</code> <code>int</code> <p>The duration of the loop in beats.</p> <code>4</code> <code>align</code> <code>bool</code> <p>Whether to align the loop on its next beat sequence.</p> <code>True</code> <p>Returns:</p> Type Description <code>callable</code> <p>A decorator registering and scheduling the function in a loop.</p>"},{"location":"reference/soir/#soir.sleep","title":"<code>sleep(beats)</code>","text":"<p>Sleep for the given duration in beats in the current loop.</p> <p>In this example, we define a 4-beats loop that plays a kick sample every beats, and sleeps for 1 beat between each sample.</p> <pre><code>@loop\ndef my_loop(beats=4, track=1):\n   for i in range(4):\n      s.play('kick')\n      sleep(1)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>beats</code> <code>float</code> <p>The duration to sleep in beats.</p> required <p>Raises:</p> Type Description <code>NotInLiveLoopException</code> <p>If we are not in a loop.</p>"},{"location":"reference/tracks/","title":"\ud83c\udfac tracks","text":""},{"location":"reference/tracks/#soir.tracks","title":"<code>tracks</code>","text":"<p>The <code>tracks</code> module provides a way to setup and control tracks in the soir engine. A track has an instrument type and a set of parameters and effects. Once a track is created, loops can be scheduled on it. Tracks can be added &amp; removed in real-time using the <code>setup()</code> function, existing tracks are untouched.</p>"},{"location":"reference/tracks/#soir.tracks--cookbook","title":"Cookbook","text":""},{"location":"reference/tracks/#soir.tracks--setup-tracks","title":"Setup tracks","text":"<pre><code>tracks.setup({\n    'bass': tracks.mk_sampler(fxs={\n        'reverb': fx.mk_reverb(mix=0.2),\n    }),\n    'melody': tracks.mk_sampler()\n})\n</code></pre>"},{"location":"reference/tracks/#soir.tracks--get-current-tracks","title":"Get current tracks","text":"<pre><code>trks = tracks.layout()\n</code></pre>"},{"location":"reference/tracks/#soir.tracks--reference","title":"Reference","text":""},{"location":"reference/tracks/#soir.tracks.Track","title":"<code>Track(name='unnamed', instrument='unknown', muted=None, volume=1.0, pan=0.0, fxs=None, extra=None)</code>  <code>dataclass</code>","text":"<p>Representation of a Soir track.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The track name.</p> <code>instrument</code> <code>str</code> <p>The instrument type.</p> <code>muted</code> <code>bool | None</code> <p>The muted state. Defaults to None.</p> <code>volume</code> <code>float | Control</code> <p>The volume in the [0.0, 1.0] range. Defaults to 1.0.</p> <code>pan</code> <code>float | Control</code> <p>The pan in the [-1.0, 1.0] range. Defaults to 0.0.</p> <code>fxs</code> <code>dict | None</code> <p>The effects. Defaults to None.</p> <code>extra</code> <code>str | None</code> <p>Extra parameters, JSON encoded. Defaults to None.</p>"},{"location":"reference/tracks/#soir.tracks.layout","title":"<code>layout()</code>","text":"<p>Get the current tracks.</p> <p>Returns:</p> Type Description <code>dict[Track]</code> <p>dict[Track]: The current tracks.</p> <p>Raises:</p> Type Description <code>InLoopException</code> <p>If called from inside a loop.</p>"},{"location":"reference/tracks/#soir.tracks.mk","title":"<code>mk(instrument, muted=None, volume=1.0, pan=0.0, fxs=None, extra=None)</code>","text":"<p>Creates a new track.</p> <p>Parameters:</p> Name Type Description Default <code>instrument</code> <code>str</code> <p>The instrument type.</p> required <code>muted</code> <code>bool</code> <p>The muted state. Defaults to None.</p> <code>None</code> <code>volume</code> <code>float | Control</code> <p>The volume in the [0.0, 1.0] range. Defaults to 1.0.</p> <code>1.0</code> <code>pan</code> <code>float | Control</code> <p>The pan in the [-1.0, 1.0] range. Defaults to 0.0.</p> <code>0.0</code> <code>fxs</code> <code>dict</code> <p>The effects to apply to the track. Defaults to None.</p> <code>None</code> <code>extra</code> <code>dict</code> <p>Extra parameters. Defaults to None.</p> <code>None</code>"},{"location":"reference/tracks/#soir.tracks.mk_midi","title":"<code>mk_midi(muted=None, volume=1.0, pan=0.0, midi_device=0, audio_device=0, fxs=None)</code>","text":"<p>Creates a new midi track.</p> <p>Parameters:</p> Name Type Description Default <code>track</code> <code>int</code> <p>The track id.</p> required <code>muted</code> <code>bool</code> <p>The muted state. Defaults to None.</p> <code>None</code> <code>volume</code> <code>float | Control</code> <p>The volume in the [0.0, 1.0] range. Defaults to 1.0.</p> <code>1.0</code> <code>pan</code> <code>float | Control</code> <p>The pan in the [-1.0, 1.0] range. Defaults to 0.0.</p> <code>0.0</code> <code>midi_device</code> <code>int</code> <p>The midi device. Defaults to -1.</p> <code>0</code> <code>audio_device</code> <code>int</code> <p>The audio device. Defaults to -1.</p> <code>0</code> <code>fxs</code> <code>dict</code> <p>The effects to apply to the track. Defaults to None.</p> <code>None</code>"},{"location":"reference/tracks/#soir.tracks.mk_sampler","title":"<code>mk_sampler(muted=None, volume=1.0, pan=0.0, fxs=None, extra=None)</code>","text":"<p>Creates a new sampler track.</p> <p>Parameters:</p> Name Type Description Default <code>muted</code> <code>bool</code> <p>The muted state. Defaults to None.</p> <code>None</code> <code>volume</code> <code>float | Control</code> <p>The volume in the [0.0, 1.0] range. Defaults to 1.0.</p> <code>1.0</code> <code>pan</code> <code>float | Control</code> <p>The pan in the [-1.0, 1.0] range. Defaults to 0.0.</p> <code>0.0</code> <code>fxs</code> <code>dict</code> <p>The effects to apply to the track. Defaults to None.</p> <code>None</code> <code>extra</code> <code>dict</code> <p>Extra parameters. Defaults to None.</p> <code>None</code>"},{"location":"reference/tracks/#soir.tracks.setup","title":"<code>setup(tracks)</code>","text":"<p>Setup tracks.</p> <p>Parameters:</p> Name Type Description Default <code>tracks</code> <code>dict[str, Track]</code> <p>The tracks to setup.</p> required <p>Raises:</p> Type Description <code>InLoopException</code> <p>If called from inside a loop.</p>"}]}