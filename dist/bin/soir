#!/usr/bin/env just --justfile

export SOIR_DIR := env("SOIR_DIR", env_var("HOME") + "/.soir")
export SOIR_BIN_DIR := SOIR_DIR + "/bin"
export SOIR_SAMPLES_DIR := SOIR_DIR + "/samples"

_default:
    @just --list --unsorted --justfile {{ justfile() }}

# --- SETUP

# Show environment informations.
[group('setup')]
setup-info:
    #!/usr/bin/env bash
    echo "SOIR_DIR: $SOIR_DIR"
    echo "SOIR_BIN_DIR: $SOIR_BIN_DIR"
    echo "SOIR_SAMPLES_DIR: $SOIR_SAMPLES_DIR"

# Initializes soir Python environment.
[group('setup')]
setup-init:
    #!/usr/bin/env bash
    poetry -C ${SOIR_DIR} env use -C ${SOIR_DIR} python3.11
    poetry -C ${SOIR_DIR} install -C ${SOIR_DIR}

# Check if dependencies are installed.
[group('setup')]
setup-check-deps:
    #!/usr/bin/env bash
    function check-dep {
        if ! command -v $1 &> /dev/null; then
            echo "$1: KO"
        else
            echo "$1: OK"
        fi
    }

    check-dep "jq"
    check-dep "curl"
    check-dep "python3.11"
    check-dep "poetry"

# Upgrade soir to the latest version.
[group('setup')]
setup-upgrade:
    #!/usr/bin/env bash
    curl -sL https://soir.dev/install.sh | bash

# --- SESSION

# Creates a new soir session.
[group('session')]
[no-cd]
session-new session:
    #!/usr/bin/env bash

    echo "Creating a new soir session {{ session }}"
 
    mkdir -p "{{ session }}"
    mkdir -p "{{ session }}/etc"
 
    if ! [ -f "{{ session }}/etc/config.yaml" ]; then
        just --justfile {{ justfile() }} prepare-config {{ session }}
    fi

    if ! [ -f "{{ session }}/live.py" ]; then
        cp "{{ SOIR_DIR }}/live.py.example" "{{ session }}/live.py"
    fi

# Runs a soir session.
[group('session')]
[no-cd]
session-run session:
    #!/usr/bin/env bash

    echo "Running soir session {{ session }}"

    cd "{{ session }}"

    poetry -C ${SOIR_DIR} run -C ${SOIR_DIR} soir-engine --config etc/config.yaml

# --- SAMPLES

# List sample packs.
[group('samples')]
sample-ls-packs:
    #!/usr/bin/env -S poetry -C {{ SOIR_DIR }} run python3.11
    import os
    import json
    import prettytable

    def main():
        sp_dir = os.environ.get("SOIR_SAMPLES_DIR")

        installed = [p for p in os.listdir(sp_dir) if os.path.isdir(f"{sp_dir}/{p}")]

        packs = {}

        with open(f"{sp_dir}/registry.json", "r") as f:
            registry = json.load(f)

        for pack in registry["packs"]:
            packs[pack["name"].lower()] = {
                "description": pack["description"],
                "installed": pack["name"].lower() in installed,
            }

        for pack in installed:
            if pack.lower() not in packs:
                packs[pack] = {"description": "Unknown", "installed": True}

        table = prettytable.PrettyTable()
        table.field_names = ["Name", "Description", "Installed"]
        for name, pack in packs.items():
            is_installed = name.lower() in installed
            table.add_row([name, pack["description"], pack["installed"]])

        print(table)

    main()

# Create a sample pack.
[group('samples')]
[no-cd]
sample-mk-pack sample-pack:
    #!/usr/bin/env -S poetry -C {{ SOIR_DIR }} run python3.11
    import yaml
    import os
    import shutil
    import sys

    def normalize_name(name: str) -> str:
        """Normalize a name to be used as a sample name in Neon.
        """
        for char in ["_", "(", ")", "[", "]", "{", "}", ":", ";", ",", ".", "!", "?", " "]:
            name = name.replace(char, "-")
        return name.lower()

    def get_samples_from_directory(directory: str) -> list:
        """Get all samples from a directory.
        """
        samples = []
        names = set()
        for root, dirs, files in os.walk(directory):
            for file in files:
                if file.endswith(".wav"):
                    full_path = os.path.join(root, file)
                    name = normalize_name(os.path.splitext(file)[0])
                    if name in names:
                        raise ValueError(f"collision in sample names: {name} already exist")
                    names.add(name)
                    samples.append({'name': name, 'path': full_path})
        return samples

    def main():
        """Main function.
        """
        sp = "{{ sample-pack }}"
        if not os.path.isdir(sp):
            print(f"Sample directory {sp} does not exist")
            exit()

        target = f"{os.environ.get('SOIR_SAMPLES_DIR')}"


        pack_file = f"{ sp }.pack.yaml"
        samples = get_samples_from_directory(sp)
        with open(pack_file, "w") as f:
            data = {'name': sp, 'samples': samples}
            yaml.dump(data, f)
            print(f"Sample pack { sp } created, you can now install it with `soir sample-install-pack { sp }`")

    main()


# Install a sample pack.
[group('samples')]
[no-cd]
sample-install-pack sample-pack:
    #!/usr/bin/env bash

    function check_if_installed {
        if [ -d "${SOIR_SAMPLES_DIR}/${1}" ]; then
            echo "Sample pack ${1} is already installed"
            exit 0
        fi
    }

    function maybe_install_local {
        if [ -f "${1}.pack.yaml" ]; then
            cp "${1}.pack.yaml" "${SOIR_SAMPLES_DIR}/"
            cp -R "${1}" "${SOIR_SAMPLES_DIR}/"
            echo "Sample pack ${1} installed"
            exit 0
        fi
    }

    function maybe_install_remote {
        if [ -f "${SOIR_SAMPLES_DIR}/registry.json" ]; then
            url=$(cat "${SOIR_SAMPLES_DIR}/registry.json" | jq ".packs[] | select(.name == \"${1}\") | .url" | tr -d '"')
            if [ -n "${url}" ]; then
                curl -sL ${url} --output /dev/stdout | tar -xz -C "${SOIR_SAMPLES_DIR}"
                echo "Sample pack ${1} installed"
                exit 0
            fi
        fi
    }

    check_if_installed "{{ sample-pack }}"
    maybe_install_local "{{ sample-pack }}"
    maybe_install_remote "{{ sample-pack }}"

    echo "Sample pack ${1} not found"


# Convert a sample directory to 48kHz.
[group('samples')]
[no-cd]
sample-convert-48khz sample-dir:
    #!/usr/bin/env bash

    function convert {
        sp="${1}/${2}"
        echo -n "Converting ${sp} to 48kHz... "
        ffmpeg -i "${sp}" -ar 48000 -ac 2 "${sp}.48khz.wav" &> /dev/null
        rm "${sp}"
        mv "${sp}.48khz.wav" "${sp}"
        echo "OK"
    }

    find "{{ sample-dir }}" -name "*.wav" -print0 | while read -d $'\0' file
    do
        convert "$(dirname "${file}")" "$(basename "${file}")"
    done


# --- HELPERS

[private]
[no-cd]
prepare-config session template="config.yaml.template":
    #!/usr/bin/env -S poetry -C {{ SOIR_DIR }} run python3.11
    #
    # Script to prepare the configuration file for a new soir session.
    # It uses the template from the SOIR_DIR as a base.
    import jinja2
    import os
    import sys

    soir_dir = os.environ.get("SOIR_DIR")

    def get_virtual_env_site_packages() -> str:
        """Returns the site-packages of the virtual environment.
        """
        dirs = []
        for path in sys.path:
            if "site-packages" in path:
                return path
        raise ValueError("Could not find the site-packages directory")

    def main(output: str) -> None:
        with open(f"{soir_dir}/etc/{{ template }}", "r") as f:
            template = jinja2.Template(f.read())
            with open(f"{output}/etc/config.yaml", "w") as f:
                f.write(
                    template.render(
                        soir_dir=os.environ.get("SOIR_DIR"),
                        audio_device_id=1,
                        site_packages=get_virtual_env_site_packages(),
                    )
                )
    
    main("{{session}}")
