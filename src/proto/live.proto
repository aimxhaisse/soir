// Maethstro L I V E
//
// There are two services:
//
// Midi: processes incoming requests from Matin
// Soir: processes incoming requests from Midi 

syntax = "proto3";

package proto;

// Used to send a code update to Midi.
message MidiUpdate {
  // Code update.
  message Code {
    string code = 1;
  }

  // Midi controller.
  message Midi {
    bytes payload = 1;
  }

  message Request {
    oneof request {
     Code code = 1;
     Midi midi = 2;
    }
  }

  message Response {}
}

// Used to receive notifications from Midi.
message MidiNotifications {
  message Request {}

  // Log message from Midi.
  message Log {
    string source = 1;
    string notification = 2;
  }

  // Nofification from Midi.
  message Response {
    oneof notification {
      Log log = 1;
    }
  }
}

// Midi service.
service Midi {
  // Used by Matin to send code updates.
  rpc Update(MidiUpdate.Request) returns (MidiUpdate.Response) {}

  // Used by Matin to receive notifications.
  rpc Notifications(MidiNotifications.Request) returns (stream MidiNotifications.Response) {}
}

// RPC to stream MIDI events to Soir.
message MidiEvents {
  message Request {
    bytes midi_payload = 1;
  }

  message Response {}
}

// Representation of a track.
message Track {
  enum Instrument {
    TRACK_MONO_SAMPLER = 0;
  }

  uint32 channel = 1;

  // Those are marked as optional in case we are calling SetupTracks:
  // if no parameters were specified and the track exists we don't
  // override what's already defined.
  optional Instrument instrument = 2;
  optional bool muted = 3;
  optional uint32 volume = 4;
  optional uint32 pan = 5;
}

// Get track message.
message GetTracks {
  message Request {}

  message Response {
    repeated Track tracks = 1;
  }
}

// Setups tracks message.
message SetupTracks {
  message Request {
    repeated Track tracks = 1;
  }

  message Response {}
}

// Soir service.
service Soir {
  // Send a stream of MIDI events to Soir.
  rpc MidiEvents(stream MidiEvents.Request) returns (MidiEvents.Response) {}

  // Get all tracks currently running on Soir.
  rpc GetTracks(GetTracks.Request) returns (GetTracks.Response) {}

  // Sets up tracks currently running on Soir.
  rpc SetupTracks(SetupTracks.Request) returns (SetupTracks.Response) {}
}
